name: Build and Push

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Manual trigger
  workflow_call: # Allow other workflows to call this one

# Required permissions for pushing to GHCR
permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build # Verify TS compiles successfully

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Set image tag variables
      - name: Set image tags
        id: tags
        run: |
          # Set repository name
          REPO_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/api-gateway"

          # Set SHA tag
          SHA_TAG="${REPO_NAME}:sha-${GITHUB_SHA::7}"

          # Set branch tag for non-PR events
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            BRANCH_TAG="${REPO_NAME}:$(echo ${{ github.ref_name }} | sed 's/\//-/g')"
          else
            BRANCH_TAG=""
          fi

          # Set latest tag only for main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            LATEST_TAG="${REPO_NAME}:latest"
          else
            LATEST_TAG=""
          fi

          # Output the tags
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "branch_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

          # Create a space-separated list of all tags for docker build command
          ALL_TAGS="${SHA_TAG}"
          if [[ -n "${BRANCH_TAG}" ]]; then ALL_TAGS="${ALL_TAGS} ${BRANCH_TAG}"; fi
          if [[ -n "${LATEST_TAG}" ]]; then ALL_TAGS="${ALL_TAGS} ${LATEST_TAG}"; fi
          echo "all_tags=${ALL_TAGS}" >> $GITHUB_OUTPUT

      # Build the Docker image locally
      - name: Build Docker image
        run: |
          # Build the base image with SHA tag
          docker build -t ${{ steps.tags.outputs.sha_tag }} .

          # Tag with branch name if not a PR
          if [[ -n "${{ steps.tags.outputs.branch_tag }}" ]]; then
            docker tag ${{ steps.tags.outputs.sha_tag }} ${{ steps.tags.outputs.branch_tag }}
          fi

          # Tag as latest if on main branch
          if [[ -n "${{ steps.tags.outputs.latest_tag }}" ]]; then
            docker tag ${{ steps.tags.outputs.sha_tag }} ${{ steps.tags.outputs.latest_tag }}
          fi

      # Push the Docker image to GHCR (skip on PRs)
      - name: Push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Push the SHA tag
          docker push ${{ steps.tags.outputs.sha_tag }}

          # Push the branch tag if it exists
          if [[ -n "${{ steps.tags.outputs.branch_tag }}" ]]; then
            docker push ${{ steps.tags.outputs.branch_tag }}
          fi

          # Push the latest tag if it exists
          if [[ -n "${{ steps.tags.outputs.latest_tag }}" ]]; then
            docker push ${{ steps.tags.outputs.latest_tag }}
          fi

      # Set output for downstream jobs
      - name: Set Output
        id: set_output
        run: |
          # Use the latest tag if on main, otherwise use SHA tag
          if [[ -n "${{ steps.tags.outputs.latest_tag }}" ]]; then
            echo "image_tag=${{ steps.tags.outputs.latest_tag }}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ steps.tags.outputs.sha_tag }}" >> $GITHUB_OUTPUT
          fi

      # Upload docker-compose.yml for deployment job
      - name: Archive docker-compose.yml
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-file
          path: docker-compose.yml
          retention-days: 1
