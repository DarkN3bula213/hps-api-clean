name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  # Run the build_and_push job first
  build:
    name: Build and Push Docker Image
    uses: ./.github/workflows/build.yml
    secrets: inherit

  # Run the test job
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Run the lint job
  lint:
    name: Lint and Format
    uses: ./.github/workflows/lint.yml
    secrets: inherit

  # Deploy to Hostinger after all other jobs succeed
  deploy:
    name: Deploy to Hostinger
    needs: [build, test, lint]
    runs-on: ubuntu-latest
    # environment: production # Optional: Define environment for protection rules/secrets

    steps:
      - name: Download docker-compose.yml
        uses: actions/download-artifact@v4
        with:
          name: docker-compose-file
          path: . # Download to current directory

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}

      # Make sure the host key is added to known_hosts
      - name: Add host key to known_hosts
        run: ssh-keyscan -H ${{ secrets.HOSTINGER_SSH_HOST }} >> ~/.ssh/known_hosts

      # Test SSH connection before deploying
      - name: Test SSH Connection and Path
        run: |
          echo "Attempting SSH connection to ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }}"
          echo "Checking existence and permissions of path: ${{ secrets.HOSTINGER_APP_PATH }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }} 'echo "Connection successful! Listing target directory:" && ls -la ${{ secrets.HOSTINGER_APP_PATH }}'

      # This step copies the docker-compose.yml downloaded from the artifact
      - name: Copy docker-compose.yml to server
        run: |
          scp -o StrictHostKeyChecking=no ./docker-compose.yml ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }}:${{ secrets.HOSTINGER_APP_PATH }}/docker-compose.yml

      - name: Deploy and Restart Service
        uses: appleboy/ssh-action@v1.0.3
        id: deploy_script
        with:
          host: ${{ secrets.HOSTINGER_SSH_HOST }}
          username: ${{ secrets.HOSTINGER_SSH_USER }}
          key: ${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            APP_PATH="${{ secrets.HOSTINGER_APP_PATH }}"
            BACKUP_DIR="${APP_PATH}/../backups" # Store backups one level up
            BACKUP_FILE="backup-$(date +%Y%m%d%H%M%S).tar.gz"
            IMAGE_NAME="ghcr.io/${{ secrets.GHCR_USERNAME }}/api-gateway:latest" # Replace if needed

            echo "--- Starting Deployment ---"
            cd $APP_PATH || exit 1 # Ensure we are in the app directory

            # 1. Create Backup
            echo "--- Creating Backup ---"
            mkdir -p $BACKUP_DIR
            # Backup only essential files like docker-compose.yml, .env if present
            tar czf ${BACKUP_DIR}/${BACKUP_FILE} docker-compose.yml .env || echo "Backup created (ignoring tar exit code if .env doesn't exist)."
            echo "Backup created at ${BACKUP_DIR}/${BACKUP_FILE}"

            # 3. Pull latest image
            echo "--- Pulling Docker Image: ${IMAGE_NAME} ---"
            docker pull $IMAGE_NAME

            # 4. Take down current containers
            echo "--- Stopping Current Containers ---"
            docker-compose down

            # 5. Restart containers with new image
            echo "--- Starting New Containers ---"
            docker-compose up -d --remove-orphans

            # 6. Basic Health Check (wait a few seconds for service to start)
            echo "--- Performing Health Check ---"
            sleep 10 # Adjust as needed
            # Replace '/health' with your actual health check endpoint if you have one
            # curl --fail http://localhost:3000/health || (echo "Health check failed!" && exit 1)
            echo "--- Deployment Successful ---"

      - name: Rollback on Failure
        if: failure() && steps.deploy_script.outcome == 'failure'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_SSH_HOST }}
          username: ${{ secrets.HOSTINGER_SSH_USER }}
          key: ${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "!!! Deployment Failed - Rolling Back !!!"
            APP_PATH="${{ secrets.HOSTINGER_APP_PATH }}"
            BACKUP_DIR="${APP_PATH}/../backups"

            # Find the latest backup
            LATEST_BACKUP=$(ls -t ${BACKUP_DIR}/backup-*.tar.gz | head -n 1)
            if [ -z "$LATEST_BACKUP" ]; then
              echo "Error: No backup found to restore!"
              exit 1
            fi
            echo "Restoring from ${LATEST_BACKUP}"

            cd $APP_PATH || exit 1

            # Stop potentially broken containers
            docker-compose down || echo "Ignoring docker-compose down failure during rollback"

            # Restore files from backup
            tar xzf $LATEST_BACKUP -C .

            # Restart with the restored configuration (should use the previous image tag)
            echo "Restarting previous version..."
            docker-compose up -d
            echo "!!! Rollback Complete !!!"
            exit 1 # Ensure the overall workflow status is failure
